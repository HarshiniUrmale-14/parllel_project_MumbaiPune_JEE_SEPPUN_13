package com.capgemini.jdbc.dao;

import java.io.FileReader;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.Statement;
import java.util.ArrayList;
import java.util.List;
import java.util.Properties;
import java.util.Scanner;

import com.capgemini.jdbc.bean.UserBean;
import com.capgemini.jdbc.factory.Factory;
import com.capgemini.jdbc.validation.CustomValidationDao;

public class AdminDaoImpl implements AdminDao {
	FileReader reader;

	Properties properties;
	Scanner scanner = new Scanner(System.in);

	public AdminDaoImpl() {
		try {
			Class.forName("com.mysql.jdbc.Driver");
			reader = new FileReader("db.properties");
			properties = new Properties();
			properties.load(reader);
		} catch (Exception e) {
			e.printStackTrace();
		}
	}

	@Override
	public int adminLogin(String emailId, String password) {
		int id = 0;
		try (Connection connnection = DriverManager.getConnection(properties.getProperty("dbUrl"), properties.getProperty("user"),
				properties.getProperty("password"));
				PreparedStatement pstmt = connnection.prepareStatement(properties.getProperty("query3"))) {
			pstmt.setString(1, emailId);
			pstmt.setString(2, password);
			try (ResultSet res = pstmt.executeQuery()) {
				if (res.next()) {
					System.out.println("id =" + res.getInt(1));
					id = res.getInt(1);
				}
			} catch (Exception e) {
				e.printStackTrace();
			}
		} catch (Exception e) {
			e.printStackTrace();
		}
		return id;
	}

	@Override
	public int insertProduct(String pCategory, String pName, Double pPrice, int pQuantity) {
		int count = 0;
		try (Connection connnection = DriverManager.getConnection(properties.getProperty("dbUrl"), properties.getProperty("user"),
				properties.getProperty("password"));
				PreparedStatement pstmt = connnection.prepareStatement(properties.getProperty("query4"))) {
			pstmt.setString(1, pCategory);
			pstmt.setString(2, pName);
			pstmt.setDouble(3, pPrice);
			pstmt.setInt(4, pQuantity);
			count = pstmt.executeUpdate();
			if (count > 0) {
				System.out.println("DATA INSERTED");
			}
		} catch (Exception e) {
			e.printStackTrace();
		}
		return count;
	}

	@Override
	public int deleteProduct(int pId) {
		int count = 0;
		try (Connection connnection = DriverManager.getConnection(properties.getProperty("dbUrl"), properties.getProperty("user"),
				properties.getProperty("password"));
				PreparedStatement pstmt = connnection.prepareStatement(properties.getProperty("query5"))) {
			pstmt.setInt(1, pId);
			count = pstmt.executeUpdate();
		} catch (Exception e) {
			e.printStackTrace();
		}
		return count;
	}

	@Override
	public void updateProduct(int pId) {
		System.out.println("ENTER 1 TO UPDATE THE CATEGORY");
		System.out.println("ENTER 2 TO UPDATE THE NAME");
		System.out.println("ENTER 3 TO UPDATE THE PRICE");
		System.out.println("enter 4 TO UPDATE THE QUANTITY ");
		String button = scanner.nextLine();
		switch (button) {
		case "1": {
			System.out.println("ENTER CATEGORY");
			String category = scanner.nextLine();
			try (Connection connnection = DriverManager.getConnection(properties.getProperty("dbUrl"), properties.getProperty("user"),
					properties.getProperty("password"));
					PreparedStatement pstmt = connnection.prepareStatement(properties.getProperty("query6"))) {

				pstmt.setString(1, category);
				pstmt.setInt(2, pId);
				int count = pstmt.executeUpdate();
				if (count > 0) {
					System.out.println("PRODUCT CATEGORY UPDATED");
				}
			} catch (Exception e) {
				e.printStackTrace();
			}
		}
			break;
		case "2": {
			System.out.println("ENTER NAME");
			String name = scanner.nextLine();
			try (Connection connnection = DriverManager.getConnection(properties.getProperty("dbUrl"), properties.getProperty("user"),
					properties.getProperty("password"));
					PreparedStatement pstmt = connnection.prepareStatement(properties.getProperty("query7"))) {

				pstmt.setString(1, name);
				pstmt.setInt(2, pId);
				int count = pstmt.executeUpdate();
				if (count > 0) {
					System.out.println("PRODUCT NAME UPDATED");
				}
			} catch (Exception e) {
				e.printStackTrace();
			}
		}
			break;
		case "3": {
			try {
				System.out.println("ENTER PRICE");
				double price = Double.parseDouble(scanner.nextLine());

				try (Connection connnection = DriverManager.getConnection(properties.getProperty("dbUrl"), properties.getProperty("user"),
						properties.getProperty("password"));
						PreparedStatement pstmt = connnection.prepareStatement(properties.getProperty("query8"))) {
					pstmt.setDouble(1, price);
					pstmt.setInt(2, pId);
					int count = pstmt.executeUpdate();
					if (count > 0) {
						System.out.println("PRODUCT PRICE UPDATED");
					}
				} catch (Exception e) {
					e.printStackTrace();
				}
			} catch (NumberFormatException e) {
				System.out.println("ENTER ONLY NUMBER");
			}
		}
			break;
		case "4": {

			try {
				System.out.println("ENTER QUANTITY");
				String quantity = scanner.nextLine();
				try (Connection connnection = DriverManager.getConnection(properties.getProperty("dbUrl"), properties.getProperty("user"),
						properties.getProperty("password"));
						PreparedStatement pstmt = connnection.prepareStatement(properties.getProperty("query9"))) {

					pstmt.setString(1, quantity);
					pstmt.setInt(2, pId);
					int count = pstmt.executeUpdate();
					if (count > 0) {
						System.out.println("PRODUCT QUANTITY UPDATED");
					}
				} catch (Exception e) {
					e.printStackTrace();
				}

			} catch (NumberFormatException e) {
				System.out.println("ENTER ONLY NUMBER");
			}

		}
			break;
		default: {
			System.out.println("ENTER ONLY BUTTON BETWEEN 1 TO 4");
		}
		}

	}

	@Override
	public List<UserBean> getUsers() {
		List<UserBean> userlist = new ArrayList<UserBean>();
		try (Connection connnection = DriverManager.getConnection(properties.getProperty("dbUrl"), properties.getProperty("user"),
				properties.getProperty("password")); Statement stmt = connnection.createStatement()) {
			try (ResultSet res = stmt.executeQuery(properties.getProperty("query25"))) {
				while (res.next()) {
					UserBean user = new UserBean();
					user.setUserId(res.getInt(1));
					user.setEmailId(res.getString(2));
					user.setMobileNo(res.getString(3));
					userlist.add(user);
				}
			} catch (Exception e) {
				e.printStackTrace();
			}
		} catch (Exception e) {
			e.printStackTrace();
		}
		return userlist;
	}

	@Override
	public int deleteUser(int uId) {
		int count = 0;
		try (Connection connnection = DriverManager.getConnection(properties.getProperty("dbUrl"), properties.getProperty("user"),
				properties.getProperty("password"));
				PreparedStatement pstmt = conn.prepareStatement(properties.getProperty("query13"))) {
			pstmt.setInt(1, uId);
			count = pstmt.executeUpdate();
		} catch (Exception e) {
			e.printStackTrace();
		}
		return count;

	}

	@Override
	public void sendReply() {
		CustomValidationDao customVali = Factory.getCustomValImplInstance();
		String getEmailId = null;
		String msg = null;
		int count = 0;
		try (Connection conn = DriverManager.getConnection(properties.getProperty("dbUrl"), properties.getProperty("user"),
				properties.getProperty("password"));
				PreparedStatement pstmt = conn.prepareStatement(properties.getProperty("query19"))) {
			try {
				System.out.println("ENTER THE USER ID");
				int userId = Integer.parseInt(scanner.nextLine());

				if (customVali.checkUserId(userId)) {
					pstmt.setInt(1, userId);
					try (ResultSet res = pstmt.executeQuery()) {
						while (res.next()) {
							System.out.println("EMAILID IS" + res.getString(1));
							System.out.println("USER ID IS" + userId);
							getEmailId = res.getString(1);
						}
						System.out.println("ENTER THE MESSAGE TO BE SENT");
						msg = scanner.nextLine();
						try (Connection conn1 = DriverManager.getConnection(properties.getProperty("dbUrl"),
								properties.getProperty("user"), properties.getProperty("password"));
								PreparedStatement pstmt1 = conn1.prepareStatement(properties.getProperty("query23"))) {
							pstmt1.setInt(1, userId);
							pstmt1.setString(2, getEmailId);
							pstmt1.setString(3, msg);
							count = pstmt1.executeUpdate();
							if (count > 0) {
								System.out.println("DATA IS INSERTED");
							}
						} catch (Exception e) {
							e.printStackTrace();
						}
					} catch (Exception e) {
						e.printStackTrace();
					}
				} else {
					System.err.println("USER ID DOES NOT EXIST");
				}
			} catch (NumberFormatException e) {
				System.err.println("ENTER NUMBER ONLY");
			}

		} catch (Exception e) {
			e.printStackTrace();
		}

	}

	@Override
	public void seeRequest() {
		try (Connection conn = DriverManager.getConnection(properties.getProperty("dbUrl"), properties.getProperty("user"),
				properties.getProperty("password")); Statement stmt = conn.createStatement()) {
			try (ResultSet res = stmt.executeQuery(properties.getProperty("query22"))) {
				while (res.next()) {
					System.out.println("MESSAGE ID IS" + res.getInt(1));
					System.out.println("USER ID IS" + res.getInt(2));
					System.out.println("EMAILID IS" + res.getString(3));
					System.out.println("MESSAGE  IS" + res.getString(4));
				}
			} catch (Exception e) {
				e.printStackTrace();
			}
		} catch (Exception e) {
			e.printStackTrace();
		}
	}

}
